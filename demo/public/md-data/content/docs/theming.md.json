{
  "content": "# Theming Guide\r\n\r\nLearn how to customize the appearance of the Markdown Explorer Viewer to match your application's design.\r\n\r\n## Built-in Themes\r\n\r\nThe component comes with three theme options:\r\n\r\n- `light` - Clean, bright theme suitable for most applications\r\n- `dark` - Dark theme for low-light environments\r\n- `auto` - Automatically detects system preference\r\n\r\n### Setting a Theme\r\n\r\n```tsx\r\n// Light theme\r\n<MarkdownExplorer fileTree={fileTree} theme=\"light\" />\r\n\r\n// Dark theme  \r\n<MarkdownExplorer fileTree={fileTree} theme=\"dark\" />\r\n\r\n// Auto-detect system preference\r\n<MarkdownExplorer fileTree={fileTree} theme=\"auto\" />\r\n```\r\n\r\n## CSS Custom Properties\r\n\r\nThe component uses CSS custom properties (variables) for easy theming:\r\n\r\n### Light Theme Variables\r\n\r\n```css\r\n:root {\r\n  --me-primary: #2563eb;\r\n  --me-primary-hover: #1d4ed8;\r\n  --me-text-primary: #1f2937;\r\n  --me-text-secondary: #6b7280;\r\n  --me-text-muted: #9ca3af;\r\n  --me-bg-primary: #ffffff;\r\n  --me-bg-secondary: #f9fafb;\r\n  --me-bg-tertiary: #f3f4f6;\r\n  --me-border: #e5e7eb;\r\n  --me-border-hover: #d1d5db;\r\n  --me-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);\r\n  --me-shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1);\r\n  --me-radius: 0.375rem;\r\n  --me-radius-lg: 0.5rem;\r\n  --me-transition: all 0.15s ease-in-out;\r\n  --me-sidebar-width: 280px;\r\n  --me-code-bg: #f8fafc;\r\n  --me-code-border: #e2e8f0;\r\n}\r\n```\r\n\r\n### Dark Theme Variables\r\n\r\n```css\r\n[data-theme=\"dark\"] {\r\n  --me-text-primary: #f9fafb;\r\n  --me-text-secondary: #d1d5db;\r\n  --me-text-muted: #9ca3af;\r\n  --me-bg-primary: #111827;\r\n  --me-bg-secondary: #1f2937;\r\n  --me-bg-tertiary: #374151;\r\n  --me-border: #374151;\r\n  --me-border-hover: #4b5563;\r\n  --me-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.3);\r\n  --me-shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.3);\r\n  --me-code-bg: #1e293b;\r\n  --me-code-border: #334155;\r\n}\r\n```\r\n\r\n## Custom Styling\r\n\r\n### Using CSS Classes\r\n\r\nYou can add custom styling using the `className` prop:\r\n\r\n```tsx\r\n<MarkdownExplorer \r\n  fileTree={fileTree}\r\n  className=\"my-custom-explorer\"\r\n/>\r\n```\r\n\r\n```css\r\n.my-custom-explorer {\r\n  border: 2px solid #3b82f6;\r\n  border-radius: 12px;\r\n  overflow: hidden;\r\n}\r\n\r\n/* Customize sidebar */\r\n.my-custom-explorer .sidebar {\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n}\r\n\r\n/* Customize file tree */\r\n.my-custom-explorer .file-tree {\r\n  padding: 1rem;\r\n}\r\n```\r\n\r\n### Overriding CSS Variables\r\n\r\nCreate your own theme by overriding the CSS variables:\r\n\r\n```css\r\n.purple-theme {\r\n  --me-primary: #8b5cf6;\r\n  --me-primary-hover: #7c3aed;\r\n  --me-bg-secondary: #faf5ff;\r\n  --me-border: #e9d5ff;\r\n}\r\n```\r\n\r\n```tsx\r\n<MarkdownExplorer \r\n  fileTree={fileTree}\r\n  className=\"purple-theme\"\r\n/>\r\n```\r\n\r\n## Custom Markdown Components\r\n\r\nCustomize how markdown elements are rendered:\r\n\r\n```tsx\r\nconst customComponents = {\r\n  h1: ({ children }) => (\r\n    <h1 style={{ \r\n      color: '#8b5cf6', \r\n      borderBottom: '3px solid #8b5cf6',\r\n      paddingBottom: '0.5rem'\r\n    }}>\r\n      {children}\r\n    </h1>\r\n  ),\r\n  \r\n  h2: ({ children }) => (\r\n    <h2 style={{ \r\n      color: '#6366f1',\r\n      marginTop: '2rem'\r\n    }}>\r\n      üéØ {children}\r\n    </h2>\r\n  ),\r\n  \r\n  code: ({ children, className }) => (\r\n    <code \r\n      className={className}\r\n      style={{ \r\n        background: '#f1f5f9',\r\n        padding: '2px 6px',\r\n        borderRadius: '4px',\r\n        border: '1px solid #cbd5e1'\r\n      }}\r\n    >\r\n      {children}\r\n    </code>\r\n  ),\r\n  \r\n  blockquote: ({ children }) => (\r\n    <blockquote style={{\r\n      borderLeft: '4px solid #8b5cf6',\r\n      background: 'linear-gradient(90deg, #faf5ff 0%, #f3f4f6 100%)',\r\n      padding: '1rem',\r\n      margin: '1rem 0',\r\n      borderRadius: '0 8px 8px 0'\r\n    }}>\r\n      {children}\r\n    </blockquote>\r\n  ),\r\n  \r\n  table: ({ children }) => (\r\n    <div style={{ overflowX: 'auto', margin: '1rem 0' }}>\r\n      <table style={{\r\n        width: '100%',\r\n        borderCollapse: 'collapse',\r\n        border: '2px solid #e5e7eb',\r\n        borderRadius: '8px',\r\n        overflow: 'hidden'\r\n      }}>\r\n        {children}\r\n      </table>\r\n    </div>\r\n  )\r\n};\r\n\r\n<MarkdownExplorer \r\n  fileTree={fileTree}\r\n  markdownComponents={customComponents}\r\n/>\r\n```\r\n\r\n## Icon Customization\r\n\r\n### Custom File Icons\r\n\r\n```tsx\r\nconst renderFileIcon = (node: FileNode) => {\r\n  const ext = node.name.split('.').pop()?.toLowerCase();\r\n  \r\n  switch (ext) {\r\n    case 'md':\r\n    case 'markdown':\r\n      return <span style={{ color: '#22c55e' }}>üìù</span>;\r\n    case 'js':\r\n    case 'jsx':\r\n      return <span style={{ color: '#f7df1e' }}>üü®</span>;\r\n    case 'ts':\r\n    case 'tsx':\r\n      return <span style={{ color: '#3178c6' }}>üü¶</span>;\r\n    case 'css':\r\n      return <span style={{ color: '#1572b6' }}>üé®</span>;\r\n    default:\r\n      return <span style={{ color: '#6b7280' }}>üìÑ</span>;\r\n  }\r\n};\r\n\r\nconst renderFolderIcon = (node: FileNode) => {\r\n  return <span style={{ color: '#f59e0b' }}>üìÅ</span>;\r\n};\r\n\r\n<MarkdownExplorer \r\n  fileTree={fileTree}\r\n  renderFileIcon={renderFileIcon}\r\n  renderFolderIcon={renderFolderIcon}\r\n/>\r\n```\r\n\r\n## Responsive Design\r\n\r\nThe component is responsive by default, but you can customize breakpoints:\r\n\r\n```css\r\n/* Custom mobile styles */\r\n@media (max-width: 768px) {\r\n  .my-explorer {\r\n    --me-sidebar-width: 100%;\r\n  }\r\n}\r\n\r\n/* Custom tablet styles */\r\n@media (max-width: 1024px) {\r\n  .my-explorer {\r\n    --me-sidebar-width: 240px;\r\n  }\r\n}\r\n```\r\n\r\n## Advanced Theming\r\n\r\n### Theme Switching\r\n\r\n```tsx\r\nfunction ThemeableExplorer() {\r\n  const [theme, setTheme] = useState<'light' | 'dark' | 'auto'>('auto');\r\n  \r\n  return (\r\n    <div>\r\n      <div style={{ padding: '1rem' }}>\r\n        <label>\r\n          Theme:\r\n          <select value={theme} onChange={(e) => setTheme(e.target.value as any)}>\r\n            <option value=\"light\">Light</option>\r\n            <option value=\"dark\">Dark</option>\r\n            <option value=\"auto\">Auto</option>\r\n          </select>\r\n        </label>\r\n      </div>\r\n      \r\n      <MarkdownExplorer \r\n        fileTree={fileTree}\r\n        theme={theme}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n### Dynamic Styling\r\n\r\n```tsx\r\nfunction DynamicExplorer() {\r\n  const [accentColor, setAccentColor] = useState('#2563eb');\r\n  \r\n  const customStyle = {\r\n    '--me-primary': accentColor,\r\n    '--me-primary-hover': adjustBrightness(accentColor, -20)\r\n  } as React.CSSProperties;\r\n  \r\n  return (\r\n    <div style={customStyle}>\r\n      <input \r\n        type=\"color\" \r\n        value={accentColor}\r\n        onChange={(e) => setAccentColor(e.target.value)}\r\n      />\r\n      \r\n      <MarkdownExplorer fileTree={fileTree} />\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\nThis comprehensive theming system allows you to create a markdown explorer that perfectly matches your application's design language!"
}
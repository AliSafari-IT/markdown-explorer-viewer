{
  "content": "# API Overview\r\n\r\nThe Markdown Explorer Viewer provides a comprehensive API for customizing and controlling the component behavior.\r\n\r\n## Core Components\r\n\r\n### MarkdownExplorer\r\n\r\nThe main component that orchestrates the entire experience.\r\n\r\n**Props:**\r\n- `fileTree`: FileNode - The hierarchical file structure\r\n- `theme`: 'light' | 'dark' | 'auto' - Color theme\r\n- `enableSearch`: boolean - Enable/disable search functionality\r\n- `showBreadcrumbs`: boolean - Show navigation breadcrumbs\r\n- `onNavigate`: function - Callback for navigation events\r\n\r\n### FileTree\r\n\r\nStandalone file tree component for custom layouts.\r\n\r\n**Props:**\r\n- `fileTree`: FileNode - File structure to display\r\n- `currentPath`: string - Currently selected path\r\n- `onNodeClick`: function - Handle file/folder clicks\r\n- `enableSearch`: boolean - Enable search within tree\r\n\r\n### MarkdownViewer\r\n\r\nPure markdown rendering component.\r\n\r\n**Props:**\r\n- `content`: string - Markdown content to render\r\n- `theme`: 'light' | 'dark' | 'auto' - Color theme\r\n- `components`: object - Custom React components for markdown elements\r\n\r\n## Data Types\r\n\r\n### FileNode\r\n\r\n```typescript\r\ninterface FileNode {\r\n  name: string;           // Display name\r\n  path: string;           // Full path identifier\r\n  type: 'file' | 'folder'; // Node type\r\n  children?: FileNode[];  // Child nodes (folders only)\r\n  content?: string;       // File content (files only)\r\n  lastModified?: string;  // ISO date string\r\n  size?: number;          // File size in bytes\r\n}\r\n```\r\n\r\n## Utility Functions\r\n\r\n### parseFileTree(files: Record<string, string>): FileNode\r\n\r\nConverts a flat file structure into a hierarchical tree.\r\n\r\n```typescript\r\nconst files = {\r\n  '/docs/readme.md': '# Documentation',\r\n  '/docs/api/overview.md': '# API Overview'\r\n};\r\n\r\nconst tree = parseFileTree(files);\r\n```\r\n\r\n### findNodeByPath(tree: FileNode, path: string): FileNode | null\r\n\r\nLocates a specific node in the file tree.\r\n\r\n```typescript\r\nconst node = findNodeByPath(fileTree, '/docs/api/overview.md');\r\n```\r\n\r\n### searchNodes(tree: FileNode, query: string): FileNode[]\r\n\r\nSearches for nodes matching the given query.\r\n\r\n```typescript\r\nconst results = searchNodes(fileTree, 'api');\r\n```\r\n\r\n## Event Handling\r\n\r\n### Navigation Events\r\n\r\n```typescript\r\nconst handleNavigate = (path: string, node: FileNode) => {\r\n  // Called when user navigates to a different file/folder\r\n  console.log('Navigated to:', path);\r\n  \r\n  // Update browser URL\r\n  window.history.pushState({}, '', `/docs\\$path}`);\r\n  \r\n  // Track analytics\r\n  analytics.track('documentation_view', { path });\r\n};\r\n```\r\n\r\n### Search Events\r\n\r\nSearch is handled internally, but you can control it programmatically:\r\n\r\n```typescript\r\n// Custom search implementation\r\nconst MyCustomExplorer = () => {\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const filteredTree = useMemo(() => {\r\n    return searchQuery \r\n      ? filterTreeByQuery(fileTree, searchQuery)\r\n      : fileTree;\r\n  }, [fileTree, searchQuery]);\r\n\r\n  return (\r\n    <MarkdownExplorer\r\n      fileTree={filteredTree}\r\n      enableSearch={false} // Disable built-in search\r\n    />\r\n  );\r\n};\r\n```\r\n\r\nFor more detailed examples, see the [API Reference](/docs/api/reference.md)."
}
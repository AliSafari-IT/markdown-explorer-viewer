{
  "content": "# Basic Examples\r\n\r\nThis page contains basic implementation examples for the Markdown Explorer Viewer.\r\n\r\n## Minimal Setup\r\n\r\nThe simplest way to get started:\r\n\r\n```tsx\r\nimport { MarkdownExplorer, parseFileTree } from '@asafarim/markdown-explorer-viewer';\r\n\r\nconst files = {\r\n  '/README.md': '# Hello World\\n\\nWelcome to my documentation!'\r\n};\r\n\r\nfunction App() {\r\n  return (\r\n    <MarkdownExplorer \r\n      fileTree={parseFileTree(files)} \r\n    />\r\n  );\r\n}\r\n```\r\n\r\n## Multiple Files and Folders\r\n\r\nCreating a more complex file structure:\r\n\r\n```tsx\r\nconst documentationFiles = {\r\n  '/README.md': '# Project Documentation\\n\\nOverview of the project.',\r\n  '/getting-started.md': '# Getting Started\\n\\nQuick start guide.',\r\n  '/guides/installation.md': '# Installation\\n\\nHow to install the project.',\r\n  '/guides/configuration.md': '# Configuration\\n\\nConfiguring your setup.',\r\n  '/api/overview.md': '# API Overview\\n\\nIntroduction to our API.',\r\n  '/api/endpoints.md': '# API Endpoints\\n\\nComplete endpoint reference.',\r\n  '/examples/basic.md': '# Basic Examples\\n\\nSimple usage examples.',\r\n  '/examples/advanced.md': '# Advanced Examples\\n\\nComplex use cases.'\r\n};\r\n\r\nconst fileTree = parseFileTree(documentationFiles);\r\n\r\nfunction DocumentationSite() {\r\n  return (\r\n    <div style={{ height: '100vh' }}>\r\n      <MarkdownExplorer \r\n        fileTree={fileTree}\r\n        initialRoute=\"/README.md\"\r\n        enableSearch={true}\r\n        showBreadcrumbs={true}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## With Theme Toggle\r\n\r\nAdding a theme switcher:\r\n\r\n```tsx\r\nimport { useState } from 'react';\r\n\r\nfunction ThemedDocumentation() {\r\n  const [theme, setTheme] = useState<'light' | 'dark'>('light');\r\n  \r\n  return (\r\n    <div>\r\n      <header style={{ padding: '1rem', background: theme === 'dark' ? '#1f2937' : '#f9fafb' }}>\r\n        <button onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}>\r\n          Switch to {theme === 'light' ? 'Dark' : 'Light'} Theme\r\n        </button>\r\n      </header>\r\n      \r\n      <div style={{ height: 'calc(100vh - 70px)' }}>\r\n        <MarkdownExplorer \r\n          fileTree={fileTree}\r\n          theme={theme}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## Custom File Icons\r\n\r\nCustomizing how files appear in the tree:\r\n\r\n```tsx\r\nconst customFileIcon = (node: FileNode) => {\r\n  const extension = node.name.split('.').pop()?.toLowerCase();\r\n  \r\n  const iconMap = {\r\n    'md': '📖',\r\n    'js': '💛', \r\n    'ts': '💙',\r\n    'json': '⚙️',\r\n    'css': '🎨',\r\n    'html': '🌐',\r\n    'png': '🖼️',\r\n    'jpg': '🖼️',\r\n    'gif': '🖼️'\r\n  };\r\n  \r\n  return <span>{iconMap[extension] || '📄'}</span>;\r\n};\r\n\r\nconst customFolderIcon = (node: FileNode) => {\r\n  const folderNames = {\r\n    'api': '🔌',\r\n    'docs': '📚',\r\n    'examples': '💡',\r\n    'guides': '📋',\r\n    'assets': '📦'\r\n  };\r\n  \r\n  return <span>{folderNames[node.name] || '📁'}</span>;\r\n};\r\n\r\n<MarkdownExplorer \r\n  fileTree={fileTree}\r\n  renderFileIcon={customFileIcon}\r\n  renderFolderIcon={customFolderIcon}\r\n/>\r\n```\r\n\r\n## Navigation Handling\r\n\r\nIntegrating with routing and analytics:\r\n\r\n```tsx\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction RoutedDocumentation() {\r\n  const navigate = useNavigate();\r\n  \r\n  const handleNavigate = (path: string, node: FileNode) => {\r\n    // Update browser URL\r\n    navigate(`/docs\\$path}`);\r\n    \r\n    // Track page views\r\n    if (typeof gtag !== 'undefined') {\r\n      gtag('config', 'GA_MEASUREMENT_ID', {\r\n        page_title: node.name,\r\n        page_location: window.location.href\r\n      });\r\n    }\r\n    \r\n    // Update document title\r\n    document.title = `\\$node.name} - Documentation`;\r\n  };\r\n  \r\n  return (\r\n    <MarkdownExplorer \r\n      fileTree={fileTree}\r\n      onNavigate={handleNavigate}\r\n    />\r\n  );\r\n}\r\n```\r\n\r\n## Responsive Layout\r\n\r\nCreating a mobile-friendly layout:\r\n\r\n```tsx\r\nimport { useState, useEffect } from 'react';\r\n\r\nfunction ResponsiveDocumentation() {\r\n  const [isMobile, setIsMobile] = useState(false);\r\n  const [sidebarVisible, setSidebarVisible] = useState(true);\r\n  \r\n  useEffect(() => {\r\n    const checkMobile = () => {\r\n      const mobile = window.innerWidth < 768;\r\n      setIsMobile(mobile);\r\n      setSidebarVisible(!mobile);\r\n    };\r\n    \r\n    checkMobile();\r\n    window.addEventListener('resize', checkMobile);\r\n    return () => window.removeEventListener('resize', checkMobile);\r\n  }, []);\r\n  \r\n  return (\r\n    <div>\r\n      {isMobile && (\r\n        <header style={{ padding: '1rem', background: '#f3f4f6' }}>\r\n          <button onClick={() => setSidebarVisible(!sidebarVisible)}>\r\n            {sidebarVisible ? 'Hide' : 'Show'} Files\r\n          </button>\r\n        </header>\r\n      )}\r\n      \r\n      <MarkdownExplorer \r\n        fileTree={fileTree}\r\n        showFileTree={sidebarVisible}\r\n        sidebarWidth={isMobile ? '100%' : '280px'}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## Search Integration\r\n\r\nAdding custom search functionality:\r\n\r\n```tsx\r\nimport { useState, useMemo } from 'react';\r\nimport { searchNodes } from '@asafarim/markdown-explorer-viewer';\r\n\r\nfunction SearchableDocumentation() {\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [searchResults, setSearchResults] = useState<FileNode[]>([]);\r\n  \r\n  const handleSearch = (query: string) => {\r\n    setSearchQuery(query);\r\n    if (query.trim()) {\r\n      const results = searchNodes(fileTree, query);\r\n      setSearchResults(results);\r\n    } else {\r\n      setSearchResults([]);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div>\r\n      <div style={{ padding: '1rem', borderBottom: '1px solid #e5e7eb' }}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search documentation...\"\r\n          value={searchQuery}\r\n          onChange={(e) => handleSearch(e.target.value)}\r\n          style={{\r\n            width: '100%',\r\n            padding: '0.5rem',\r\n            border: '1px solid #d1d5db',\r\n            borderRadius: '0.375rem'\r\n          }}\r\n        />\r\n        \r\n        {searchResults.length > 0 && (\r\n          <div style={{ marginTop: '1rem' }}>\r\n            <h4>Search Results ({searchResults.length})</h4>\r\n            <ul>\r\n              {searchResults.map(node => (\r\n                <li key={node.path}>\r\n                  <strong>{node.name}</strong> - {node.path}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        )}\r\n      </div>\r\n      \r\n      <MarkdownExplorer \r\n        fileTree={fileTree}\r\n        enableSearch={false} // Use custom search instead\r\n      />\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\nThese examples should give you a solid foundation for implementing the Markdown Explorer Viewer in your own projects!"
}
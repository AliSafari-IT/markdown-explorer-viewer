{
  "content": "# Advanced Examples\r\n\r\nThis page demonstrates advanced usage patterns and integration techniques.\r\n\r\n## Dynamic Content Loading\r\n\r\nLoading markdown content from an API:\r\n\r\n```tsx\r\nimport { useState, useEffect } from 'react';\r\nimport { FileNode } from '@asafarim/markdown-explorer-viewer';\r\n\r\nfunction DynamicDocumentation() {\r\n  const [fileTree, setFileTree] = useState<FileNode | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  \r\n  useEffect(() => {\r\n    async function loadDocumentation() {\r\n      try {\r\n        // Load file list from API\r\n        const response = await fetch('/api/documentation/files');\r\n        const fileList = await response.json();\r\n        \r\n        // Build file tree with lazy loading\r\n        const tree = buildFileTreeWithLazyLoading(fileList);\r\n        setFileTree(tree);\r\n      } catch (error) {\r\n        console.error('Failed to load documentation:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n    \r\n    loadDocumentation();\r\n  }, []);\r\n  \r\n  const handleNavigate = async (path: string, node: FileNode) => {\r\n    if (node.type === 'file' && !node.content) {\r\n      // Lazy load content when file is accessed\r\n      try {\r\n        const response = await fetch(`/api/documentation/content?path=\\$encodeURIComponent(path)}`);\r\n        const content = await response.text();\r\n        node.content = content;\r\n        \r\n        // Force re-render by updating the tree\r\n        setFileTree({ ...fileTree! });\r\n      } catch (error) {\r\n        console.error('Failed to load file content:', error);\r\n        node.content = 'Error loading content';\r\n      }\r\n    }\r\n  };\r\n  \r\n  if (loading) {\r\n    return <div>Loading documentation...</div>;\r\n  }\r\n  \r\n  if (!fileTree) {\r\n    return <div>Failed to load documentation</div>;\r\n  }\r\n  \r\n  return (\r\n    <MarkdownExplorer \r\n      fileTree={fileTree}\r\n      onNavigate={handleNavigate}\r\n    />\r\n  );\r\n}\r\n\r\nfunction buildFileTreeWithLazyLoading(fileList: string[]): FileNode {\r\n  // Implementation details...\r\n  return {\r\n    name: 'Documentation',\r\n    path: '/',\r\n    type: 'folder',\r\n    children: fileList.map(filePath => ({\r\n      name: filePath.split('/').pop()!,\r\n      path: filePath,\r\n      type: 'file' as const,\r\n      // content will be loaded lazily\r\n    }))\r\n  };\r\n}\r\n```\r\n\r\n## Multi-language Documentation\r\n\r\nSupporting multiple languages:\r\n\r\n```tsx\r\ninterface MultiLanguageProps {\r\n  languages: { code: string; name: string }[];\r\n  defaultLanguage: string;\r\n}\r\n\r\nfunction MultiLanguageDocumentation({ languages, defaultLanguage }: MultiLanguageProps) {\r\n  const [currentLanguage, setCurrentLanguage] = useState(defaultLanguage);\r\n  const [fileTrees, setFileTrees] = useState<Record<string, FileNode>>({});\r\n  \r\n  useEffect(() => {\r\n    async function loadLanguageFiles() {\r\n      const trees: Record<string, FileNode> = {};\r\n      \r\n      for (const lang of languages) {\r\n        const response = await fetch(`/api/docs/\\$lang.code}/files`);\r\n        const files = await response.json();\r\n        trees[lang.code] = parseFileTree(files);\r\n      }\r\n      \r\n      setFileTrees(trees);\r\n    }\r\n    \r\n    loadLanguageFiles();\r\n  }, [languages]);\r\n  \r\n  const currentFileTree = fileTrees[currentLanguage];\r\n  \r\n  return (\r\n    <div style={{ height: '100vh', display: 'flex', flexDirection: 'column' }}>\r\n      <header style={{ padding: '1rem', borderBottom: '1px solid #e5e7eb' }}>\r\n        <div style={{ display: 'flex', alignItems: 'center', gap: '1rem' }}>\r\n          <h1>Documentation</h1>\r\n          <select \r\n            value={currentLanguage}\r\n            onChange={(e) => setCurrentLanguage(e.target.value)}\r\n          >\r\n            {languages.map(lang => (\r\n              <option key={lang.code} value={lang.code}>\r\n                {lang.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </header>\r\n      \r\n      <div style={{ flex: 1 }}>\r\n        {currentFileTree && (\r\n          <MarkdownExplorer \r\n            key={currentLanguage} // Force re-render on language change\r\n            fileTree={currentFileTree}\r\n            initialRoute={`/README.\\$currentLanguage}.md`}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## Version-aware Documentation\r\n\r\nSupporting multiple documentation versions:\r\n\r\n```tsx\r\ninterface VersionedDocumentationProps {\r\n  versions: { version: string; label: string; default?: boolean }[];\r\n}\r\n\r\nfunction VersionedDocumentation({ versions }: VersionedDocumentationProps) {\r\n  const [currentVersion, setCurrentVersion] = useState(\r\n    versions.find(v => v.default)?.version || versions[0]?.version\r\n  );\r\n  const [fileTree, setFileTree] = useState<FileNode | null>(null);\r\n  \r\n  useEffect(() => {\r\n    async function loadVersionFiles() {\r\n      const response = await fetch(`/api/docs/\\$currentVersion}/structure`);\r\n      const files = await response.json();\r\n      setFileTree(parseFileTree(files));\r\n    }\r\n    \r\n    if (currentVersion) {\r\n      loadVersionFiles();\r\n    }\r\n  }, [currentVersion]);\r\n  \r\n  const handleNavigate = async (path: string, node: FileNode) => {\r\n    if (node.type === 'file' && !node.content) {\r\n      const response = await fetch(`/api/docs/\\$currentVersion}/content?path=\\$encodeURIComponent(path)}`);\r\n      const content = await response.text();\r\n      node.content = content;\r\n      setFileTree({ ...fileTree! });\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div style={{ height: '100vh', display: 'flex', flexDirection: 'column' }}>\r\n      <header style={{ \r\n        padding: '1rem', \r\n        background: '#1f2937', \r\n        color: 'white',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center'\r\n      }}>\r\n        <h1>Project Documentation</h1>\r\n        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n          <label style={{ fontSize: '0.875rem' }}>Version:</label>\r\n          <select \r\n            value={currentVersion}\r\n            onChange={(e) => setCurrentVersion(e.target.value)}\r\n            style={{ padding: '0.25rem 0.5rem', borderRadius: '0.25rem' }}\r\n          >\r\n            {versions.map(version => (\r\n              <option key={version.version} value={version.version}>\r\n                {version.label}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </header>\r\n      \r\n      <div style={{ flex: 1 }}>\r\n        {fileTree && (\r\n          <MarkdownExplorer \r\n            key={currentVersion}\r\n            fileTree={fileTree}\r\n            onNavigate={handleNavigate}\r\n            theme=\"dark\"\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## Custom Markdown Plugins\r\n\r\nAdding custom markdown processing:\r\n\r\n```tsx\r\nimport { useMemo } from 'react';\r\n\r\nfunction CustomMarkdownExplorer() {\r\n  const customComponents = useMemo(() => ({\r\n    // Custom code block with copy functionality\r\n    pre: ({ children, ...props }: any) => {\r\n      const [copied, setCopied] = useState(false);\r\n      \r\n      const handleCopy = async () => {\r\n        const code = children.props.children;\r\n        await navigator.clipboard.writeText(code);\r\n        setCopied(true);\r\n        setTimeout(() => setCopied(false), 2000);\r\n      };\r\n      \r\n      return (\r\n        <div style={{ position: 'relative' }}>\r\n          <pre {...props} style={{ paddingTop: '2.5rem' }}>\r\n            {children}\r\n          </pre>\r\n          <button\r\n            onClick={handleCopy}\r\n            style={{\r\n              position: 'absolute',\r\n              top: '0.5rem',\r\n              right: '0.5rem',\r\n              padding: '0.25rem 0.5rem',\r\n              background: copied ? '#10b981' : '#6b7280',\r\n              color: 'white',\r\n              border: 'none',\r\n              borderRadius: '0.25rem',\r\n              fontSize: '0.75rem'\r\n            }}\r\n          >\r\n            {copied ? 'Copied!' : 'Copy'}\r\n          </button>\r\n        </div>\r\n      );\r\n    },\r\n    \r\n    // Custom callout boxes\r\n    blockquote: ({ children }: any) => {\r\n      const content = children.props.children;\r\n      const isCallout = content.startsWith('[!');\r\n      \r\n      if (isCallout) {\r\n        const type = content.match(/\\[!(\\w+)\\]/)?.[1]?.toLowerCase();\r\n        const text = content.replace(/\\[!\\w+\\]\\s*/, '');\r\n        \r\n        const calloutStyles = {\r\n          note: { border: '#3b82f6', bg: '#dbeafe' },\r\n          warning: { border: '#f59e0b', bg: '#fef3c7' },\r\n          danger: { border: '#ef4444', bg: '#fee2e2' },\r\n          tip: { border: '#10b981', bg: '#d1fae5' }\r\n        };\r\n        \r\n        const style = calloutStyles[type] || calloutStyles.note;\r\n        \r\n        return (\r\n          <div style={{\r\n            border: `2px solid \\$style.border}`,\r\n            background: style.bg,\r\n            padding: '1rem',\r\n            borderRadius: '0.5rem',\r\n            margin: '1rem 0'\r\n          }}>\r\n            <div style={{ \r\n              fontWeight: 'bold', \r\n              textTransform: 'uppercase',\r\n              fontSize: '0.875rem',\r\n              color: style.border,\r\n              marginBottom: '0.5rem'\r\n            }}>\r\n              {type || 'Note'}\r\n            </div>\r\n            {text}\r\n          </div>\r\n        );\r\n      }\r\n      \r\n      return <blockquote>{children}</blockquote>;\r\n    },\r\n    \r\n    // Interactive checkboxes for task lists\r\n    input: ({ type, checked, ...props }: any) => {\r\n      if (type === 'checkbox') {\r\n        return (\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={checked}\r\n            onChange={() => {}} // Make readonly for demo\r\n            style={{ marginRight: '0.5rem' }}\r\n            {...props}\r\n          />\r\n        );\r\n      }\r\n      return <input type={type} {...props} />;\r\n    }\r\n  }), []);\r\n  \r\n  return (\r\n    <MarkdownExplorer \r\n      fileTree={fileTree}\r\n      markdownComponents={customComponents}\r\n    />\r\n  );\r\n}\r\n```\r\n\r\n## Integration with State Management\r\n\r\nUsing with Redux or Zustand:\r\n\r\n```tsx\r\n// Zustand store\r\nimport { create } from 'zustand';\r\n\r\ninterface DocumentationStore {\r\n  currentPath: string;\r\n  history: string[];\r\n  bookmarks: string[];\r\n  setCurrentPath: (path: string) => void;\r\n  addBookmark: (path: string) => void;\r\n  removeBookmark: (path: string) => void;\r\n  goBack: () => void;\r\n  goForward: () => void;\r\n}\r\n\r\nconst useDocumentationStore = create<DocumentationStore>((set, get) => ({\r\n  currentPath: '/',\r\n  history: ['/'],\r\n  bookmarks: [],\r\n  \r\n  setCurrentPath: (path) => set(state => ({\r\n    currentPath: path,\r\n    history: [...state.history, path]\r\n  })),\r\n  \r\n  addBookmark: (path) => set(state => ({\r\n    bookmarks: [...state.bookmarks, path]\r\n  })),\r\n  \r\n  removeBookmark: (path) => set(state => ({\r\n    bookmarks: state.bookmarks.filter(b => b !== path)\r\n  })),\r\n  \r\n  goBack: () => set(state => {\r\n    const newHistory = state.history.slice(0, -1);\r\n    return {\r\n      history: newHistory,\r\n      currentPath: newHistory[newHistory.length - 1] || '/'\r\n    };\r\n  }),\r\n  \r\n  goForward: () => {\r\n    // Implementation for forward navigation\r\n  }\r\n}));\r\n\r\nfunction StateManagedDocumentation() {\r\n  const { \r\n    currentPath, \r\n    bookmarks, \r\n    setCurrentPath, \r\n    addBookmark, \r\n    removeBookmark,\r\n    goBack \r\n  } = useDocumentationStore();\r\n  \r\n  const handleNavigate = (path: string, node: FileNode) => {\r\n    setCurrentPath(path);\r\n  };\r\n  \r\n  const isBookmarked = bookmarks.includes(currentPath);\r\n  \r\n  return (\r\n    <div style={{ height: '100vh', display: 'flex', flexDirection: 'column' }}>\r\n      <header style={{ padding: '1rem', borderBottom: '1px solid #e5e7eb' }}>\r\n        <div style={{ display: 'flex', alignItems: 'center', gap: '1rem' }}>\r\n          <button onClick={goBack}>← Back</button>\r\n          <span>Current: {currentPath}</span>\r\n          <button \r\n            onClick={() => isBookmarked ? removeBookmark(currentPath) : addBookmark(currentPath)}\r\n          >\r\n            {isBookmarked ? '★' : '☆'} Bookmark\r\n          </button>\r\n        </div>\r\n        \r\n        {bookmarks.length > 0 && (\r\n          <div style={{ marginTop: '0.5rem' }}>\r\n            <strong>Bookmarks:</strong>\r\n            {bookmarks.map(bookmark => (\r\n              <button \r\n                key={bookmark}\r\n                onClick={() => setCurrentPath(bookmark)}\r\n                style={{ marginLeft: '0.5rem', fontSize: '0.875rem' }}\r\n              >\r\n                {bookmark}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </header>\r\n      \r\n      <div style={{ flex: 1 }}>\r\n        <MarkdownExplorer \r\n          fileTree={fileTree}\r\n          initialRoute={currentPath}\r\n          onNavigate={handleNavigate}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\nThese advanced examples show how to build sophisticated documentation systems with dynamic loading, multi-language support, versioning, and state management integration."
}